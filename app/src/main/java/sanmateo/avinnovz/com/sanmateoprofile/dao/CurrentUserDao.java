package sanmateo.avinnovz.com.sanmateoprofile.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sanmateo.avinnovz.com.sanmateoprofile.dao.CurrentUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CURRENT_USER.
*/
public class CurrentUserDao extends AbstractDao<CurrentUser, Long> {

    public static final String TABLENAME = "CURRENT_USER";

    /**
     * Properties of entity CurrentUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property CreatedAt = new Property(2, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(3, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property FirstName = new Property(4, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(5, String.class, "lastName", false, "LAST_NAME");
        public final static Property Email = new Property(6, String.class, "email", false, "EMAIL");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property ContactNo = new Property(8, String.class, "contactNo", false, "CONTACT_NO");
        public final static Property Status = new Property(9, String.class, "status", false, "STATUS");
        public final static Property UserLevel = new Property(10, String.class, "userLevel", false, "USER_LEVEL");
        public final static Property Gender = new Property(11, String.class, "gender", false, "GENDER");
        public final static Property PicUrl = new Property(12, String.class, "picUrl", false, "PIC_URL");
        public final static Property Token = new Property(13, String.class, "token", false, "TOKEN");
    };


    public CurrentUserDao(DaoConfig config) {
        super(config);
    }
    
    public CurrentUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CURRENT_USER' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USER_ID' INTEGER," + // 1: userId
                "'CREATED_AT' TEXT," + // 2: createdAt
                "'UPDATED_AT' TEXT," + // 3: updatedAt
                "'FIRST_NAME' TEXT," + // 4: firstName
                "'LAST_NAME' TEXT," + // 5: lastName
                "'EMAIL' TEXT," + // 6: email
                "'ADDRESS' TEXT," + // 7: address
                "'CONTACT_NO' TEXT," + // 8: contactNo
                "'STATUS' TEXT," + // 9: status
                "'USER_LEVEL' TEXT," + // 10: userLevel
                "'GENDER' TEXT," + // 11: gender
                "'PIC_URL' TEXT," + // 12: picUrl
                "'TOKEN' TEXT);"); // 13: token
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CURRENT_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CurrentUser entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(3, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(4, updatedAt);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(5, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(6, lastName);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(7, email);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String contactNo = entity.getContactNo();
        if (contactNo != null) {
            stmt.bindString(9, contactNo);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(10, status);
        }
 
        String userLevel = entity.getUserLevel();
        if (userLevel != null) {
            stmt.bindString(11, userLevel);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(12, gender);
        }
 
        String picUrl = entity.getPicUrl();
        if (picUrl != null) {
            stmt.bindString(13, picUrl);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(14, token);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CurrentUser readEntity(Cursor cursor, int offset) {
        CurrentUser entity = new CurrentUser( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createdAt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // updatedAt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // firstName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // lastName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // email
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // contactNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // status
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // userLevel
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // gender
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // picUrl
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // token
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CurrentUser entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCreatedAt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUpdatedAt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFirstName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLastName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEmail(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setContactNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStatus(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUserLevel(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setGender(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPicUrl(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setToken(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CurrentUser entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CurrentUser entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
