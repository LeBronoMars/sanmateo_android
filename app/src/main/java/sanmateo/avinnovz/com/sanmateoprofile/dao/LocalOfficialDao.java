package sanmateo.avinnovz.com.sanmateoprofile.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sanmateo.avinnovz.com.sanmateoprofile.dao.LocalOfficial;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOCAL_OFFICIAL.
*/
public class LocalOfficialDao extends AbstractDao<LocalOfficial, Long> {

    public static final String TABLENAME = "LOCAL_OFFICIAL";

    /**
     * Properties of entity LocalOfficial.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OfficialId = new Property(1, Integer.class, "officialId", false, "OFFICIAL_ID");
        public final static Property CreatedAt = new Property(2, String.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(3, String.class, "updatedAt", false, "UPDATED_AT");
        public final static Property DeletedAt = new Property(4, String.class, "deletedAt", false, "DELETED_AT");
        public final static Property FirstName = new Property(5, String.class, "firstName", false, "FIRST_NAME");
        public final static Property LastName = new Property(6, String.class, "lastName", false, "LAST_NAME");
        public final static Property NickName = new Property(7, String.class, "nickName", false, "NICK_NAME");
        public final static Property Position = new Property(8, String.class, "position", false, "POSITION");
        public final static Property Background = new Property(9, String.class, "background", false, "BACKGROUND");
        public final static Property Pic = new Property(10, String.class, "pic", false, "PIC");
        public final static Property Status = new Property(11, String.class, "status", false, "STATUS");
    };


    public LocalOfficialDao(DaoConfig config) {
        super(config);
    }
    
    public LocalOfficialDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCAL_OFFICIAL' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'OFFICIAL_ID' INTEGER," + // 1: officialId
                "'CREATED_AT' TEXT," + // 2: createdAt
                "'UPDATED_AT' TEXT," + // 3: updatedAt
                "'DELETED_AT' TEXT," + // 4: deletedAt
                "'FIRST_NAME' TEXT," + // 5: firstName
                "'LAST_NAME' TEXT," + // 6: lastName
                "'NICK_NAME' TEXT," + // 7: nickName
                "'POSITION' TEXT," + // 8: position
                "'BACKGROUND' TEXT," + // 9: background
                "'PIC' TEXT," + // 10: pic
                "'STATUS' TEXT);"); // 11: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCAL_OFFICIAL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LocalOfficial entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer officialId = entity.getOfficialId();
        if (officialId != null) {
            stmt.bindLong(2, officialId);
        }
 
        String createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindString(3, createdAt);
        }
 
        String updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindString(4, updatedAt);
        }
 
        String deletedAt = entity.getDeletedAt();
        if (deletedAt != null) {
            stmt.bindString(5, deletedAt);
        }
 
        String firstName = entity.getFirstName();
        if (firstName != null) {
            stmt.bindString(6, firstName);
        }
 
        String lastName = entity.getLastName();
        if (lastName != null) {
            stmt.bindString(7, lastName);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(8, nickName);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(9, position);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(10, background);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(11, pic);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(12, status);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LocalOfficial readEntity(Cursor cursor, int offset) {
        LocalOfficial entity = new LocalOfficial( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // officialId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // createdAt
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // updatedAt
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // deletedAt
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // firstName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // nickName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // position
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // background
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // pic
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LocalOfficial entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOfficialId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCreatedAt(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUpdatedAt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeletedAt(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFirstName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNickName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPosition(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBackground(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPic(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LocalOfficial entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LocalOfficial entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
